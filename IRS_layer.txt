#기존 레이어  # 최대 주는 loss = 2.1 e-08
# (N-F)/stride +1 -> output 
tf.model = tf.keras.Sequential()
# L1
# Conv2D(filters = 필터갯수 , kernel_size = 커널 사이즈, input_shape= , padding ='same')
# Maxpooling(pool_size = , strides = ) ->다운 스케일링 같은 거
tf.model.add(tf.keras.layers.Conv2D(filters=8, kernel_size=(3, 3), input_shape=(6, 6, 1), activation='leaky_relu', padding='same'))
tf.model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2))) # size 2x2, stride = 2

# L2
tf.model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(2, 2), activation='leaky_relu'))
tf.model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))

# L3 fully connected               
tf.model.add(tf.keras.layers.Flatten())
tf.model.add(tf.keras.layers.Dense(units=1, kernel_initializer='glorot_normal',bias_initializer='zeros', activation='relu'))
tf.model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(lr=learning_rate), metrics=['accuracy'])
tf.model.summary()


5.23 # 필터 줄임 epoch= 180~220 / loss = 1.5 e-08
#정확도	0.914	0.869	0.8595	0.9375	0.826	0.845	0.845	0.856	0.626	0.75
 #CNN layer
# (N-F)/stride +1 -> output
tf.model = tf.keras.Sequential()
# L1
# Conv2D(filters = 필터갯수 , kernel_size = 커널 사이즈, input_shape= , padding ='same')
# Maxpooling(pool_size = , strides = ) ->다운 스케일링 같은 거
tf.model.add(tf.keras.layers.Conv2D(filters=4, kernel_size=(3, 3), input_shape=(6, 6, 1), activation='leaky_relu', padding='same'))
tf.model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2))) # size 2x2, stride = 2

# L2
tf.model.add(tf.keras.layers.Conv2D(filters=2, kernel_size=(2, 2), activation='leaky_relu'))
tf.model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))

# L3 fully connected               
tf.model.add(tf.keras.layers.Flatten())
tf.model.add(tf.keras.layers.Dense(units=1, kernel_initializer='glorot_normal',bias_initializer='zeros', activation='relu'))
tf.model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(lr=learning_rate), metrics=['accuracy'])
tf.model.summary()

5.23 # 정확도	0.7545	0.747	0.6095	0.666	0.812	0.88	0.85	0.8495	0.836	0.8835...0.89	0.745
# (N-F)/stride +1 -> output
tf.model = tf.keras.Sequential()
# L1
# Conv2D(filters = 필터갯수 , kernel_size = 커널 사이즈, input_shape= , padding ='same')
# Maxpooling(pool_size = , strides = ) ->다운 스케일링 같은 거
tf.model.add(tf.keras.layers.Conv2D(filters=4, kernel_size=(3, 3), input_shape=(6, 6, 1), activation='leaky_relu', padding='same'))
tf.model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2))) # size 2x2, stride = 2

# L2
tf.model.add(tf.keras.layers.Conv2D(filters=1, kernel_size=(2, 2), activation='leaky_relu'))
tf.model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))

# L3 fully connected               
tf.model.add(tf.keras.layers.Flatten())
tf.model.add(tf.keras.layers.Dense(units=1, kernel_initializer='glorot_normal',bias_initializer='zeros', activation='relu'))
tf.model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(lr=learning_rate), metrics=['accuracy'])
tf.model.summary()

5.23 #정확도	0.898...0.9075...0.9315	0.746	0.7865	0.831	0.6595	0.839	0.89	0.372...0.7465
# (N-F)/stride +1 -> output
tf.model = tf.keras.Sequential()
# L1
# Conv2D(filters = 필터갯수 , kernel_size = 커널 사이즈, input_shape= , padding ='same')
# Maxpooling(pool_size = , strides = ) ->다운 스케일링 같은 거
tf.model.add(tf.keras.layers.Conv2D(filters=3, kernel_size=(3, 3), input_shape=(6, 6, 1), activation='leaky_relu', padding='same'))
tf.model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2))) # size 2x2, stride = 2

# L2
tf.model.add(tf.keras.layers.Conv2D(filters=2, kernel_size=(2, 2), activation='leaky_relu'))
tf.model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2)))

# L3 fully connected               
tf.model.add(tf.keras.layers.Flatten())
tf.model.add(tf.keras.layers.Dense(units=1, kernel_initializer='glorot_normal',bias_initializer='zeros', activation='relu'))
tf.model.compile(loss='mse', optimizer=tf.keras.optimizers.Adam(lr=learning_rate), metrics=['accuracy'])
tf.model.summary()

L1:1 L2:1
0.7885	0.877

L1:4 L2:0
0.7255	0.777	0.8	0.8715	0.844	0.7165	0.6455	0.9585	0.941	0.799

L1:1 L2:0	epoch 100
0.9845	0.9885	0.9095	0.77

L1:1 L2:0 epoch 140 (7x7)
0.936	0.9775	0.991	0.941